/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 111.0, "minX": 0.0, "maxY": 63179.0, "series": [{"data": [[0.0, 111.0], [0.1, 150.0], [0.2, 150.0], [0.3, 151.0], [0.4, 151.0], [0.5, 151.0], [0.6, 151.0], [0.7, 151.0], [0.8, 151.0], [0.9, 152.0], [1.0, 152.0], [1.1, 152.0], [1.2, 152.0], [1.3, 152.0], [1.4, 152.0], [1.5, 152.0], [1.6, 152.0], [1.7, 152.0], [1.8, 152.0], [1.9, 152.0], [2.0, 152.0], [2.1, 152.0], [2.2, 152.0], [2.3, 153.0], [2.4, 153.0], [2.5, 153.0], [2.6, 153.0], [2.7, 153.0], [2.8, 153.0], [2.9, 153.0], [3.0, 153.0], [3.1, 153.0], [3.2, 153.0], [3.3, 153.0], [3.4, 153.0], [3.5, 153.0], [3.6, 153.0], [3.7, 153.0], [3.8, 153.0], [3.9, 153.0], [4.0, 153.0], [4.1, 153.0], [4.2, 153.0], [4.3, 153.0], [4.4, 153.0], [4.5, 154.0], [4.6, 154.0], [4.7, 154.0], [4.8, 154.0], [4.9, 154.0], [5.0, 154.0], [5.1, 154.0], [5.2, 154.0], [5.3, 154.0], [5.4, 154.0], [5.5, 154.0], [5.6, 154.0], [5.7, 154.0], [5.8, 154.0], [5.9, 154.0], [6.0, 154.0], [6.1, 154.0], [6.2, 154.0], [6.3, 154.0], [6.4, 154.0], [6.5, 154.0], [6.6, 154.0], [6.7, 154.0], [6.8, 154.0], [6.9, 154.0], [7.0, 154.0], [7.1, 154.0], [7.2, 154.0], [7.3, 154.0], [7.4, 154.0], [7.5, 155.0], [7.6, 155.0], [7.7, 155.0], [7.8, 155.0], [7.9, 155.0], [8.0, 155.0], [8.1, 155.0], [8.2, 155.0], [8.3, 155.0], [8.4, 155.0], [8.5, 155.0], [8.6, 155.0], [8.7, 155.0], [8.8, 155.0], [8.9, 155.0], [9.0, 155.0], [9.1, 155.0], [9.2, 155.0], [9.3, 155.0], [9.4, 155.0], [9.5, 155.0], [9.6, 155.0], [9.7, 155.0], [9.8, 155.0], [9.9, 155.0], [10.0, 155.0], [10.1, 155.0], [10.2, 155.0], [10.3, 155.0], [10.4, 155.0], [10.5, 155.0], [10.6, 155.0], [10.7, 155.0], [10.8, 155.0], [10.9, 155.0], [11.0, 155.0], [11.1, 155.0], [11.2, 155.0], [11.3, 155.0], [11.4, 155.0], [11.5, 155.0], [11.6, 156.0], [11.7, 156.0], [11.8, 156.0], [11.9, 156.0], [12.0, 156.0], [12.1, 156.0], [12.2, 156.0], [12.3, 156.0], [12.4, 156.0], [12.5, 156.0], [12.6, 156.0], [12.7, 156.0], [12.8, 156.0], [12.9, 156.0], [13.0, 156.0], [13.1, 156.0], [13.2, 156.0], [13.3, 156.0], [13.4, 156.0], [13.5, 156.0], [13.6, 156.0], [13.7, 156.0], [13.8, 156.0], [13.9, 156.0], [14.0, 156.0], [14.1, 156.0], [14.2, 156.0], [14.3, 156.0], [14.4, 156.0], [14.5, 156.0], [14.6, 156.0], [14.7, 156.0], [14.8, 156.0], [14.9, 156.0], [15.0, 156.0], [15.1, 156.0], [15.2, 156.0], [15.3, 156.0], [15.4, 156.0], [15.5, 156.0], [15.6, 156.0], [15.7, 156.0], [15.8, 156.0], [15.9, 156.0], [16.0, 156.0], [16.1, 157.0], [16.2, 157.0], [16.3, 157.0], [16.4, 157.0], [16.5, 157.0], [16.6, 157.0], [16.7, 157.0], [16.8, 157.0], [16.9, 157.0], [17.0, 157.0], [17.1, 157.0], [17.2, 157.0], [17.3, 157.0], [17.4, 157.0], [17.5, 157.0], [17.6, 157.0], [17.7, 157.0], [17.8, 157.0], [17.9, 157.0], [18.0, 157.0], [18.1, 157.0], [18.2, 157.0], [18.3, 157.0], [18.4, 157.0], [18.5, 157.0], [18.6, 157.0], [18.7, 157.0], [18.8, 157.0], [18.9, 157.0], [19.0, 157.0], [19.1, 157.0], [19.2, 157.0], [19.3, 157.0], [19.4, 157.0], [19.5, 157.0], [19.6, 157.0], [19.7, 157.0], [19.8, 157.0], [19.9, 157.0], [20.0, 157.0], [20.1, 157.0], [20.2, 157.0], [20.3, 157.0], [20.4, 157.0], [20.5, 157.0], [20.6, 158.0], [20.7, 158.0], [20.8, 158.0], [20.9, 158.0], [21.0, 158.0], [21.1, 158.0], [21.2, 158.0], [21.3, 158.0], [21.4, 158.0], [21.5, 158.0], [21.6, 158.0], [21.7, 158.0], [21.8, 158.0], [21.9, 158.0], [22.0, 158.0], [22.1, 158.0], [22.2, 158.0], [22.3, 158.0], [22.4, 158.0], [22.5, 158.0], [22.6, 158.0], [22.7, 158.0], [22.8, 158.0], [22.9, 158.0], [23.0, 158.0], [23.1, 158.0], [23.2, 158.0], [23.3, 158.0], [23.4, 158.0], [23.5, 158.0], [23.6, 158.0], [23.7, 158.0], [23.8, 158.0], [23.9, 158.0], [24.0, 158.0], [24.1, 158.0], [24.2, 158.0], [24.3, 158.0], [24.4, 158.0], [24.5, 158.0], [24.6, 158.0], [24.7, 158.0], [24.8, 158.0], [24.9, 158.0], [25.0, 158.0], [25.1, 159.0], [25.2, 159.0], [25.3, 159.0], [25.4, 159.0], [25.5, 159.0], [25.6, 159.0], [25.7, 159.0], [25.8, 159.0], [25.9, 159.0], [26.0, 159.0], [26.1, 159.0], [26.2, 159.0], [26.3, 159.0], [26.4, 159.0], [26.5, 159.0], [26.6, 159.0], [26.7, 159.0], [26.8, 159.0], [26.9, 159.0], [27.0, 159.0], [27.1, 159.0], [27.2, 159.0], [27.3, 159.0], [27.4, 159.0], [27.5, 159.0], [27.6, 159.0], [27.7, 159.0], [27.8, 159.0], [27.9, 159.0], [28.0, 159.0], [28.1, 159.0], [28.2, 159.0], [28.3, 159.0], [28.4, 159.0], [28.5, 159.0], [28.6, 159.0], [28.7, 159.0], [28.8, 159.0], [28.9, 159.0], [29.0, 159.0], [29.1, 159.0], [29.2, 160.0], [29.3, 160.0], [29.4, 160.0], [29.5, 160.0], [29.6, 160.0], [29.7, 160.0], [29.8, 160.0], [29.9, 160.0], [30.0, 160.0], [30.1, 160.0], [30.2, 160.0], [30.3, 160.0], [30.4, 160.0], [30.5, 160.0], [30.6, 160.0], [30.7, 160.0], [30.8, 160.0], [30.9, 160.0], [31.0, 160.0], [31.1, 160.0], [31.2, 160.0], [31.3, 160.0], [31.4, 160.0], [31.5, 160.0], [31.6, 160.0], [31.7, 160.0], [31.8, 160.0], [31.9, 160.0], [32.0, 160.0], [32.1, 160.0], [32.2, 160.0], [32.3, 160.0], [32.4, 160.0], [32.5, 160.0], [32.6, 160.0], [32.7, 160.0], [32.8, 160.0], [32.9, 160.0], [33.0, 161.0], [33.1, 161.0], [33.2, 161.0], [33.3, 161.0], [33.4, 161.0], [33.5, 161.0], [33.6, 161.0], [33.7, 161.0], [33.8, 161.0], [33.9, 161.0], [34.0, 161.0], [34.1, 161.0], [34.2, 161.0], [34.3, 161.0], [34.4, 161.0], [34.5, 161.0], [34.6, 161.0], [34.7, 161.0], [34.8, 161.0], [34.9, 161.0], [35.0, 161.0], [35.1, 161.0], [35.2, 161.0], [35.3, 161.0], [35.4, 161.0], [35.5, 161.0], [35.6, 161.0], [35.7, 161.0], [35.8, 161.0], [35.9, 161.0], [36.0, 161.0], [36.1, 161.0], [36.2, 161.0], [36.3, 161.0], [36.4, 162.0], [36.5, 162.0], [36.6, 162.0], [36.7, 162.0], [36.8, 162.0], [36.9, 162.0], [37.0, 162.0], [37.1, 162.0], [37.2, 162.0], [37.3, 162.0], [37.4, 162.0], [37.5, 162.0], [37.6, 162.0], [37.7, 162.0], [37.8, 162.0], [37.9, 162.0], [38.0, 162.0], [38.1, 162.0], [38.2, 162.0], [38.3, 162.0], [38.4, 162.0], [38.5, 162.0], [38.6, 162.0], [38.7, 162.0], [38.8, 162.0], [38.9, 162.0], [39.0, 162.0], [39.1, 162.0], [39.2, 162.0], [39.3, 163.0], [39.4, 163.0], [39.5, 163.0], [39.6, 163.0], [39.7, 163.0], [39.8, 163.0], [39.9, 163.0], [40.0, 163.0], [40.1, 163.0], [40.2, 163.0], [40.3, 163.0], [40.4, 163.0], [40.5, 163.0], [40.6, 163.0], [40.7, 163.0], [40.8, 163.0], [40.9, 163.0], [41.0, 163.0], [41.1, 163.0], [41.2, 163.0], [41.3, 163.0], [41.4, 163.0], [41.5, 163.0], [41.6, 163.0], [41.7, 163.0], [41.8, 164.0], [41.9, 164.0], [42.0, 164.0], [42.1, 164.0], [42.2, 164.0], [42.3, 164.0], [42.4, 164.0], [42.5, 164.0], [42.6, 164.0], [42.7, 164.0], [42.8, 164.0], [42.9, 164.0], [43.0, 164.0], [43.1, 164.0], [43.2, 164.0], [43.3, 164.0], [43.4, 164.0], [43.5, 164.0], [43.6, 164.0], [43.7, 164.0], [43.8, 164.0], [43.9, 164.0], [44.0, 164.0], [44.1, 165.0], [44.2, 165.0], [44.3, 165.0], [44.4, 165.0], [44.5, 165.0], [44.6, 165.0], [44.7, 165.0], [44.8, 165.0], [44.9, 165.0], [45.0, 165.0], [45.1, 165.0], [45.2, 165.0], [45.3, 165.0], [45.4, 165.0], [45.5, 165.0], [45.6, 165.0], [45.7, 165.0], [45.8, 165.0], [45.9, 165.0], [46.0, 166.0], [46.1, 166.0], [46.2, 166.0], [46.3, 166.0], [46.4, 166.0], [46.5, 166.0], [46.6, 166.0], [46.7, 166.0], [46.8, 166.0], [46.9, 166.0], [47.0, 166.0], [47.1, 166.0], [47.2, 166.0], [47.3, 166.0], [47.4, 166.0], [47.5, 166.0], [47.6, 166.0], [47.7, 167.0], [47.8, 167.0], [47.9, 167.0], [48.0, 167.0], [48.1, 167.0], [48.2, 167.0], [48.3, 167.0], [48.4, 167.0], [48.5, 167.0], [48.6, 167.0], [48.7, 167.0], [48.8, 167.0], [48.9, 167.0], [49.0, 167.0], [49.1, 167.0], [49.2, 168.0], [49.3, 168.0], [49.4, 168.0], [49.5, 168.0], [49.6, 168.0], [49.7, 168.0], [49.8, 168.0], [49.9, 168.0], [50.0, 168.0], [50.1, 168.0], [50.2, 168.0], [50.3, 168.0], [50.4, 168.0], [50.5, 169.0], [50.6, 169.0], [50.7, 169.0], [50.8, 169.0], [50.9, 169.0], [51.0, 169.0], [51.1, 169.0], [51.2, 169.0], [51.3, 169.0], [51.4, 169.0], [51.5, 169.0], [51.6, 169.0], [51.7, 170.0], [51.8, 170.0], [51.9, 170.0], [52.0, 170.0], [52.1, 170.0], [52.2, 170.0], [52.3, 170.0], [52.4, 170.0], [52.5, 170.0], [52.6, 170.0], [52.7, 170.0], [52.8, 171.0], [52.9, 171.0], [53.0, 171.0], [53.1, 171.0], [53.2, 171.0], [53.3, 171.0], [53.4, 171.0], [53.5, 171.0], [53.6, 171.0], [53.7, 171.0], [53.8, 172.0], [53.9, 172.0], [54.0, 172.0], [54.1, 172.0], [54.2, 172.0], [54.3, 172.0], [54.4, 172.0], [54.5, 172.0], [54.6, 172.0], [54.7, 173.0], [54.8, 173.0], [54.9, 173.0], [55.0, 173.0], [55.1, 173.0], [55.2, 173.0], [55.3, 173.0], [55.4, 173.0], [55.5, 174.0], [55.6, 174.0], [55.7, 174.0], [55.8, 174.0], [55.9, 174.0], [56.0, 174.0], [56.1, 174.0], [56.2, 175.0], [56.3, 175.0], [56.4, 175.0], [56.5, 175.0], [56.6, 175.0], [56.7, 175.0], [56.8, 176.0], [56.9, 176.0], [57.0, 176.0], [57.1, 176.0], [57.2, 176.0], [57.3, 176.0], [57.4, 177.0], [57.5, 177.0], [57.6, 177.0], [57.7, 177.0], [57.8, 177.0], [57.9, 178.0], [58.0, 178.0], [58.1, 178.0], [58.2, 178.0], [58.3, 178.0], [58.4, 179.0], [58.5, 179.0], [58.6, 179.0], [58.7, 179.0], [58.8, 180.0], [58.9, 180.0], [59.0, 180.0], [59.1, 181.0], [59.2, 181.0], [59.3, 181.0], [59.4, 181.0], [59.5, 182.0], [59.6, 182.0], [59.7, 182.0], [59.8, 183.0], [59.9, 183.0], [60.0, 183.0], [60.1, 184.0], [60.2, 184.0], [60.3, 184.0], [60.4, 185.0], [60.5, 185.0], [60.6, 185.0], [60.7, 186.0], [60.8, 186.0], [60.9, 187.0], [61.0, 187.0], [61.1, 187.0], [61.2, 188.0], [61.3, 188.0], [61.4, 189.0], [61.5, 189.0], [61.6, 190.0], [61.7, 190.0], [61.8, 191.0], [61.9, 191.0], [62.0, 192.0], [62.1, 192.0], [62.2, 193.0], [62.3, 194.0], [62.4, 194.0], [62.5, 195.0], [62.6, 196.0], [62.7, 196.0], [62.8, 197.0], [62.9, 198.0], [63.0, 199.0], [63.1, 200.0], [63.2, 200.0], [63.3, 201.0], [63.4, 202.0], [63.5, 203.0], [63.6, 204.0], [63.7, 205.0], [63.8, 206.0], [63.9, 207.0], [64.0, 208.0], [64.1, 210.0], [64.2, 211.0], [64.3, 212.0], [64.4, 213.0], [64.5, 215.0], [64.6, 216.0], [64.7, 217.0], [64.8, 218.0], [64.9, 219.0], [65.0, 220.0], [65.1, 221.0], [65.2, 223.0], [65.3, 224.0], [65.4, 225.0], [65.5, 226.0], [65.6, 227.0], [65.7, 229.0], [65.8, 230.0], [65.9, 231.0], [66.0, 232.0], [66.1, 233.0], [66.2, 234.0], [66.3, 236.0], [66.4, 237.0], [66.5, 238.0], [66.6, 239.0], [66.7, 241.0], [66.8, 243.0], [66.9, 244.0], [67.0, 245.0], [67.1, 247.0], [67.2, 249.0], [67.3, 251.0], [67.4, 253.0], [67.5, 255.0], [67.6, 257.0], [67.7, 260.0], [67.8, 263.0], [67.9, 265.0], [68.0, 268.0], [68.1, 272.0], [68.2, 274.0], [68.3, 278.0], [68.4, 281.0], [68.5, 285.0], [68.6, 289.0], [68.7, 297.0], [68.8, 303.0], [68.9, 312.0], [69.0, 320.0], [69.1, 336.0], [69.2, 427.0], [69.3, 1152.0], [69.4, 1155.0], [69.5, 1156.0], [69.6, 1156.0], [69.7, 1157.0], [69.8, 1158.0], [69.9, 1158.0], [70.0, 1159.0], [70.1, 1159.0], [70.2, 1159.0], [70.3, 1160.0], [70.4, 1160.0], [70.5, 1160.0], [70.6, 1161.0], [70.7, 1161.0], [70.8, 1161.0], [70.9, 1162.0], [71.0, 1162.0], [71.1, 1162.0], [71.2, 1162.0], [71.3, 1163.0], [71.4, 1163.0], [71.5, 1163.0], [71.6, 1163.0], [71.7, 1164.0], [71.8, 1164.0], [71.9, 1164.0], [72.0, 1164.0], [72.1, 1164.0], [72.2, 1165.0], [72.3, 1165.0], [72.4, 1165.0], [72.5, 1165.0], [72.6, 1166.0], [72.7, 1166.0], [72.8, 1166.0], [72.9, 1166.0], [73.0, 1166.0], [73.1, 1166.0], [73.2, 1167.0], [73.3, 1167.0], [73.4, 1167.0], [73.5, 1167.0], [73.6, 1167.0], [73.7, 1168.0], [73.8, 1168.0], [73.9, 1168.0], [74.0, 1168.0], [74.1, 1168.0], [74.2, 1169.0], [74.3, 1169.0], [74.4, 1169.0], [74.5, 1169.0], [74.6, 1169.0], [74.7, 1170.0], [74.8, 1170.0], [74.9, 1170.0], [75.0, 1170.0], [75.1, 1170.0], [75.2, 1171.0], [75.3, 1171.0], [75.4, 1171.0], [75.5, 1171.0], [75.6, 1172.0], [75.7, 1172.0], [75.8, 1172.0], [75.9, 1172.0], [76.0, 1172.0], [76.1, 1173.0], [76.2, 1173.0], [76.3, 1173.0], [76.4, 1174.0], [76.5, 1174.0], [76.6, 1174.0], [76.7, 1174.0], [76.8, 1175.0], [76.9, 1175.0], [77.0, 1175.0], [77.1, 1176.0], [77.2, 1176.0], [77.3, 1176.0], [77.4, 1177.0], [77.5, 1177.0], [77.6, 1177.0], [77.7, 1177.0], [77.8, 1178.0], [77.9, 1178.0], [78.0, 1179.0], [78.1, 1179.0], [78.2, 1179.0], [78.3, 1180.0], [78.4, 1180.0], [78.5, 1181.0], [78.6, 1181.0], [78.7, 1182.0], [78.8, 1182.0], [78.9, 1183.0], [79.0, 1183.0], [79.1, 1184.0], [79.2, 1185.0], [79.3, 1185.0], [79.4, 1186.0], [79.5, 1187.0], [79.6, 1188.0], [79.7, 1189.0], [79.8, 1190.0], [79.9, 1190.0], [80.0, 1191.0], [80.1, 1193.0], [80.2, 1194.0], [80.3, 1195.0], [80.4, 1196.0], [80.5, 1198.0], [80.6, 1199.0], [80.7, 1201.0], [80.8, 1203.0], [80.9, 1204.0], [81.0, 1206.0], [81.1, 1208.0], [81.2, 1210.0], [81.3, 1213.0], [81.4, 1216.0], [81.5, 1218.0], [81.6, 1221.0], [81.7, 1224.0], [81.8, 1227.0], [81.9, 1229.0], [82.0, 1232.0], [82.1, 1235.0], [82.2, 1237.0], [82.3, 1240.0], [82.4, 1242.0], [82.5, 1245.0], [82.6, 1247.0], [82.7, 1250.0], [82.8, 1253.0], [82.9, 1258.0], [83.0, 1262.0], [83.1, 1267.0], [83.2, 1274.0], [83.3, 1281.0], [83.4, 1291.0], [83.5, 1307.0], [83.6, 1321.0], [83.7, 1553.0], [83.8, 3158.0], [83.9, 3160.0], [84.0, 3162.0], [84.1, 3163.0], [84.2, 3164.0], [84.3, 3165.0], [84.4, 3166.0], [84.5, 3167.0], [84.6, 3167.0], [84.7, 3168.0], [84.8, 3169.0], [84.9, 3169.0], [85.0, 3170.0], [85.1, 3170.0], [85.2, 3171.0], [85.3, 3171.0], [85.4, 3172.0], [85.5, 3173.0], [85.6, 3173.0], [85.7, 3174.0], [85.8, 3174.0], [85.9, 3174.0], [86.0, 3175.0], [86.1, 3175.0], [86.2, 3176.0], [86.3, 3176.0], [86.4, 3177.0], [86.5, 3177.0], [86.6, 3178.0], [86.7, 3179.0], [86.8, 3179.0], [86.9, 3180.0], [87.0, 3180.0], [87.1, 3181.0], [87.2, 3182.0], [87.3, 3182.0], [87.4, 3183.0], [87.5, 3183.0], [87.6, 3184.0], [87.7, 3185.0], [87.8, 3186.0], [87.9, 3187.0], [88.0, 3188.0], [88.1, 3189.0], [88.2, 3190.0], [88.3, 3192.0], [88.4, 3194.0], [88.5, 3196.0], [88.6, 3199.0], [88.7, 3202.0], [88.8, 3207.0], [88.9, 3215.0], [89.0, 3223.0], [89.1, 3235.0], [89.2, 3244.0], [89.3, 3253.0], [89.4, 3268.0], [89.5, 3282.0], [89.6, 3313.0], [89.7, 7161.0], [89.8, 7167.0], [89.9, 7170.0], [90.0, 7172.0], [90.1, 7174.0], [90.2, 7175.0], [90.3, 7176.0], [90.4, 7177.0], [90.5, 7178.0], [90.6, 7180.0], [90.7, 7180.0], [90.8, 7181.0], [90.9, 7182.0], [91.0, 7184.0], [91.1, 7185.0], [91.2, 7186.0], [91.3, 7187.0], [91.4, 7188.0], [91.5, 7189.0], [91.6, 7191.0], [91.7, 7192.0], [91.8, 7194.0], [91.9, 7196.0], [92.0, 7199.0], [92.1, 7204.0], [92.2, 7212.0], [92.3, 7230.0], [92.4, 7248.0], [92.5, 7271.0], [92.6, 7298.0], [92.7, 7330.0], [92.8, 15166.0], [92.9, 15173.0], [93.0, 15177.0], [93.1, 15180.0], [93.2, 15183.0], [93.3, 15185.0], [93.4, 15187.0], [93.5, 15188.0], [93.6, 15189.0], [93.7, 15191.0], [93.8, 15193.0], [93.9, 15195.0], [94.0, 15197.0], [94.1, 15199.0], [94.2, 15201.0], [94.3, 15204.0], [94.4, 15208.0], [94.5, 15214.0], [94.6, 15226.0], [94.7, 15255.0], [94.8, 15307.0], [94.9, 21184.0], [95.0, 21190.0], [95.1, 21195.0], [95.2, 21199.0], [95.3, 21202.0], [95.4, 21206.0], [95.5, 21211.0], [95.6, 21219.0], [95.7, 21250.0], [95.8, 21294.0], [95.9, 22192.0], [96.0, 22201.0], [96.1, 22207.0], [96.2, 22213.0], [96.3, 22222.0], [96.4, 22258.0], [96.5, 24194.0], [96.6, 24213.0], [96.7, 24227.0], [96.8, 24264.0], [96.9, 28212.0], [97.0, 28228.0], [97.1, 28249.0], [97.2, 36216.0], [97.3, 36231.0], [97.4, 36245.0], [97.5, 36295.0], [97.6, 42229.0], [97.7, 42258.0], [97.8, 43220.0], [97.9, 43265.0], [98.0, 45255.0], [98.1, 49264.0], [98.2, 57252.0], [98.3, 57273.0], [98.4, 57291.0], [98.5, 57394.0], [98.6, 63099.0], [98.7, 63105.0], [98.8, 63109.0], [98.9, 63113.0], [99.0, 63115.0], [99.1, 63118.0], [99.2, 63121.0], [99.3, 63123.0], [99.4, 63126.0], [99.5, 63130.0], [99.6, 63133.0], [99.7, 63137.0], [99.8, 63141.0], [99.9, 63148.0]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 36588.0, "series": [{"data": [[600.0, 2.0], [700.0, 3.0], [1000.0, 1.0], [1100.0, 6569.0], [1200.0, 1664.0], [1300.0, 112.0], [1400.0, 18.0], [1500.0, 5.0], [1600.0, 4.0], [1700.0, 3.0], [1800.0, 1.0], [1900.0, 4.0], [2000.0, 1.0], [2100.0, 2.0], [2200.0, 3.0], [2300.0, 2.0], [2400.0, 1.0], [3100.0, 2832.0], [3200.0, 549.0], [3300.0, 55.0], [3400.0, 3.0], [3500.0, 1.0], [3700.0, 1.0], [3600.0, 2.0], [4000.0, 1.0], [4200.0, 1.0], [4500.0, 1.0], [7100.0, 1352.0], [7200.0, 346.0], [7400.0, 2.0], [7300.0, 100.0], [15100.0, 773.0], [15200.0, 389.0], [15300.0, 15.0], [15700.0, 1.0], [21100.0, 238.0], [21200.0, 336.0], [21500.0, 1.0], [21300.0, 30.0], [22200.0, 277.0], [22100.0, 60.0], [22300.0, 20.0], [24200.0, 181.0], [24100.0, 25.0], [24300.0, 10.0], [24400.0, 1.0], [100.0, 36588.0], [28200.0, 159.0], [28300.0, 16.0], [28100.0, 4.0], [36200.0, 203.0], [36300.0, 32.0], [36100.0, 1.0], [42200.0, 111.0], [42300.0, 21.0], [42400.0, 3.0], [42100.0, 1.0], [43200.0, 68.0], [43300.0, 8.0], [45200.0, 69.0], [45300.0, 8.0], [49300.0, 13.0], [49200.0, 52.0], [49400.0, 1.0], [200.0, 3282.0], [57200.0, 154.0], [57300.0, 35.0], [63000.0, 63.0], [63100.0, 807.0], [300.0, 261.0], [400.0, 28.0], [500.0, 15.0]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 63100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 889.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 40150.0, "series": [{"data": [[0.0, 40150.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8379.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 8583.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 889.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 26.397157520726413, "minX": 1.72815456E12, "maxY": 499.9208099438657, "series": [{"data": [[1.7281548E12, 229.14277108433762], [1.72815498E12, 353.04805880135626], [1.72815516E12, 499.9208099438657], [1.72815468E12, 122.5592065718295], [1.72815486E12, 250.56067677946314], [1.72815504E12, 429.2340210355983], [1.72815456E12, 26.397157520726413], [1.72815522E12, 444.08923766816133], [1.72815474E12, 149.15747875913794], [1.72815492E12, 330.304902755267], [1.7281551E12, 460.8508348794061], [1.72815462E12, 40.1586470706664]], "isOverall": false, "label": "Stress Test - API reqres.in", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72815522E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 153.0, "minX": 1.0, "maxY": 56134.333333333336, "series": [{"data": [[2.0, 2309.4285714285716], [3.0, 1664.8], [4.0, 1316.3076923076924], [5.0, 1102.125], [6.0, 999.9444444444445], [7.0, 1074.3529411764707], [8.0, 799.5833333333334], [9.0, 660.6999999999999], [10.0, 172.12135922330077], [11.0, 1585.0000000000002], [12.0, 177.58333333333334], [13.0, 2166.866666666667], [14.0, 1159.3333333333333], [15.0, 1098.875], [16.0, 1042.9411764705883], [17.0, 994.4444444444445], [18.0, 949.8421052631579], [19.0, 911.35], [20.0, 842.0909090909092], [21.0, 814.5652173913044], [22.0, 812.7826086956521], [23.0, 786.2083333333334], [24.0, 156.8], [25.0, 159.51999999999998], [26.0, 158.19230769230765], [27.0, 159.6206896551724], [28.0, 157.4], [29.0, 157.93333333333337], [30.0, 160.66666666666666], [31.0, 159.12121212121207], [32.0, 159.22580645161287], [33.0, 3737.309523809524], [34.0, 613.5588235294117], [35.0, 553.0526315789474], [36.0, 546.4102564102564], [37.0, 581.6944444444445], [38.0, 162.57500000000002], [39.0, 879.047619047619], [40.0, 168.95165535392744], [41.0, 602.6285714285714], [42.0, 619.7058823529411], [43.0, 7676.0], [45.0, 15182.0], [44.0, 15188.0], [47.0, 7674.5], [46.0, 15189.0], [49.0, 15194.0], [48.0, 15185.0], [51.0, 7685.0], [50.0, 15182.0], [52.0, 156.0], [53.0, 15198.0], [55.0, 6631.4], [56.0, 5525.0], [57.0, 15190.0], [59.0, 8174.5], [58.0, 15186.0], [61.0, 15187.0], [60.0, 15192.0], [63.0, 15192.0], [62.0, 15190.0], [66.0, 5503.333333333333], [67.0, 7668.5], [65.0, 15188.0], [64.0, 15190.0], [70.0, 12130.411764705883], [71.0, 15186.0], [69.0, 15191.0], [74.0, 15177.0], [73.0, 15186.0], [72.0, 15188.0], [79.0, 15185.0], [78.0, 15198.0], [77.0, 15169.0], [76.0, 15177.0], [83.0, 15195.0], [82.0, 15204.0], [81.0, 15206.0], [80.0, 15209.0], [87.0, 15188.0], [86.0, 15190.0], [85.0, 15193.0], [84.0, 15191.0], [91.0, 21226.0], [90.0, 15173.0], [89.0, 15175.0], [88.0, 15174.0], [95.0, 15197.0], [94.0, 15188.0], [93.0, 15198.0], [92.0, 21196.0], [99.0, 15176.0], [98.0, 15184.0], [97.0, 15194.0], [96.0, 15188.0], [100.0, 4746.282949308762], [101.0, 2438.090909090909], [102.0, 1706.7272727272725], [103.0, 2587.4285714285716], [104.0, 2852.181818181818], [105.0, 3290.2777777777774], [106.0, 2363.7333333333336], [107.0, 3247.833333333333], [108.0, 863.4], [109.0, 858.7692307692307], [110.0, 1917.5833333333333], [111.0, 1532.5454545454545], [112.0, 1076.090909090909], [113.0, 885.9090909090909], [114.0, 911.5], [115.0, 2069.4], [116.0, 1499.0833333333333], [117.0, 3358.181818181818], [118.0, 838.5], [119.0, 1168.4545454545455], [120.0, 1346.6363636363635], [121.0, 1810.0], [122.0, 1756.416666666667], [123.0, 3813.4545454545455], [124.0, 2094.416666666667], [125.0, 2259.9166666666665], [126.0, 2166.5454545454545], [127.0, 496.66666666666663], [128.0, 3371.1], [129.0, 4928.0], [130.0, 881.7870483150639], [131.0, 1934.117647058824], [132.0, 712.4285714285713], [133.0, 863.3255813953488], [134.0, 566.9761904761905], [135.0, 238.2051282051283], [136.0, 898.0], [137.0, 1028.9534883720928], [138.0, 1061.063829787234], [139.0, 411.16666666666663], [140.0, 1735.3478260869565], [141.0, 877.2500000000002], [142.0, 730.3333333333334], [143.0, 679.7142857142858], [144.0, 2103.9230769230767], [145.0, 906.4468085106382], [146.0, 403.7317073170732], [147.0, 1081.107142857143], [148.0, 659.5882352941176], [149.0, 2091.722222222222], [150.0, 1108.0238095238094], [151.0, 751.4464285714284], [152.0, 624.6808510638299], [153.0, 870.9729729729729], [154.0, 1285.84375], [155.0, 780.2058823529412], [156.0, 962.7142857142857], [157.0, 2039.195652173913], [158.0, 1551.227272727273], [159.0, 839.0000000000001], [160.0, 861.2710820177128], [161.0, 11328.42857142857], [163.0, 18201.0], [167.0, 12939.25], [165.0, 15202.5], [162.0, 21214.0], [168.0, 12390.8], [170.0, 16001.6], [171.0, 7684.0], [173.0, 19534.333333333332], [174.0, 18776.571428571428], [175.0, 15190.0], [172.0, 15189.0], [169.0, 15194.0], [183.0, 7681.0], [182.0, 15188.5], [180.0, 15182.0], [179.0, 15187.0], [178.0, 15194.0], [177.0, 15184.0], [176.0, 15197.0], [185.0, 18694.0], [187.0, 14689.5], [189.0, 9179.0], [190.0, 12410.740384615392], [191.0, 10937.75], [188.0, 15190.0], [186.0, 15192.0], [184.0, 15192.0], [192.0, 2044.75], [193.0, 15197.909090909088], [194.0, 7561.619047619048], [195.0, 2168.65], [196.0, 3500.111111111111], [197.0, 4468.4], [198.0, 15688.416666666668], [199.0, 28137.500000000007], [200.0, 25760.0], [201.0, 22482.562500000004], [202.0, 18162.08695652174], [203.0, 18249.46153846154], [204.0, 22296.09090909091], [205.0, 14804.153846153848], [206.0, 9517.0], [207.0, 28971.124999999993], [208.0, 4366.2], [209.0, 6761.083333333332], [210.0, 10436.375], [211.0, 9090.818181818182], [212.0, 1503.111111111111], [213.0, 722.4444444444445], [214.0, 5682.416666666667], [215.0, 8719.0], [216.0, 7363.200000000002], [217.0, 6512.666666666667], [218.0, 2012.6666666666665], [219.0, 3418.0], [220.0, 4604.4935064934925], [221.0, 803.4102564102564], [222.0, 2721.279069767441], [223.0, 1941.4468085106387], [224.0, 642.4], [225.0, 798.3636363636363], [226.0, 527.4210526315788], [227.0, 1425.3157894736842], [228.0, 4369.066666666667], [229.0, 4307.698113207546], [230.0, 2811.9285714285706], [231.0, 1138.032258064516], [232.0, 829.4999999999998], [233.0, 331.3913043478261], [234.0, 2350.1111111111118], [235.0, 1928.973684210526], [236.0, 1985.574074074074], [237.0, 861.5662650602409], [238.0, 409.0925925925926], [239.0, 1164.2162162162165], [240.0, 1934.4871794871794], [241.0, 1481.6097560975606], [242.0, 455.36842105263156], [243.0, 956.3750000000001], [244.0, 1261.5000000000005], [245.0, 789.7213114754096], [246.0, 276.0285714285714], [247.0, 1602.65625], [248.0, 1191.763157894737], [249.0, 1656.2888888888888], [250.0, 1012.7547078705938], [251.0, 1682.0], [252.0, 1658.0], [253.0, 9181.5], [255.0, 3178.0], [254.0, 3193.0], [270.0, 3210.0], [257.0, 1672.0], [258.0, 2167.5], [259.0, 7189.0], [262.0, 1179.0], [261.0, 3180.0], [260.0, 3179.0], [263.0, 5184.5], [256.0, 3175.0], [271.0, 3187.0], [265.0, 3183.0], [264.0, 7192.0], [269.0, 3172.0], [268.0, 7188.0], [267.0, 7188.0], [266.0, 7181.0], [287.0, 24708.0], [280.0, 14212.531249999996], [286.0, 3188.0], [285.0, 3185.0], [284.0, 3191.0], [275.0, 3197.0], [274.0, 3198.0], [273.0, 3186.0], [272.0, 3180.0], [283.0, 7198.0], [282.0, 3192.0], [281.0, 3184.0], [279.0, 3188.0], [278.0, 7188.0], [277.0, 3197.0], [276.0, 3197.0], [303.0, 15198.0], [292.0, 22712.5], [294.0, 3173.0], [293.0, 3196.0], [297.0, 51140.2], [302.0, 3183.0], [301.0, 3193.0], [300.0, 3180.0], [291.0, 3179.0], [290.0, 3178.0], [289.0, 3184.0], [288.0, 3185.0], [295.0, 3174.0], [299.0, 3186.0], [298.0, 3173.0], [296.0, 3170.0], [316.0, 3794.5], [311.0, 759.6], [304.0, 29211.5], [305.0, 15169.0], [307.0, 3175.0], [306.0, 15179.0], [310.0, 12055.323750855576], [309.0, 15185.0], [308.0, 3164.0], [312.0, 8678.333333333332], [313.0, 13690.625], [314.0, 2164.6363636363635], [315.0, 3504.25], [317.0, 5748.857142857143], [318.0, 1174.2], [319.0, 6790.4], [321.0, 2473.3076923076924], [320.0, 2503.666666666667], [322.0, 4086.5833333333335], [323.0, 708.8181818181818], [324.0, 615.5454545454545], [325.0, 2802.1818181818185], [326.0, 8707.545454545454], [327.0, 1166.142857142857], [328.0, 17633.428571428572], [334.0, 2498.8888888888887], [335.0, 13356.916666666666], [332.0, 1161.75], [333.0, 1053.1111111111113], [329.0, 10584.900000000001], [330.0, 7502.166666666666], [331.0, 5943.941176470588], [337.0, 1035.3333333333333], [336.0, 4168.9], [338.0, 6683.714285714286], [339.0, 3456.0], [340.0, 2049.8185498064095], [341.0, 5089.769230769231], [342.0, 1854.6923076923074], [343.0, 2055.6923076923076], [344.0, 2906.6744186046503], [350.0, 7619.904761904762], [351.0, 2563.985915492958], [348.0, 1788.9375000000011], [349.0, 1195.409090909091], [345.0, 927.7840909090908], [346.0, 295.54237288135596], [347.0, 256.1395348837209], [353.0, 529.9736842105262], [352.0, 825.054054054054], [354.0, 648.3823529411765], [355.0, 882.2857142857143], [356.0, 1097.3103448275863], [357.0, 873.921052631579], [358.0, 1134.764705882353], [359.0, 3844.756756756757], [360.0, 2276.0], [366.0, 3982.1052631578946], [367.0, 4118.179487179486], [364.0, 2123.142857142857], [365.0, 1326.3600000000001], [361.0, 2105.6562500000005], [362.0, 2482.4375], [363.0, 1887.8333333333335], [380.0, 17519.666666666668], [369.0, 913.9599999999998], [368.0, 2871.3896103896113], [370.0, 2090.64116915423], [371.0, 15188.0], [372.0, 19877.333333333332], [374.0, 7188.0], [373.0, 7178.0], [375.0, 5186.5], [376.0, 3178.3333333333335], [378.0, 10942.75], [377.0, 1213.0], [379.0, 26217.5], [383.0, 7184.0], [382.0, 7186.0], [381.0, 7182.0], [385.0, 3169.0], [384.0, 3159.0], [387.0, 22547.666666666664], [386.0, 3192.0], [389.0, 163.0], [388.0, 3190.0], [390.0, 11020.666666666666], [391.0, 693.5], [393.0, 29275.0], [392.0, 3185.0], [395.0, 3180.0], [394.0, 1174.0], [396.0, 14710.5], [398.0, 3395.0], [397.0, 1174.0], [399.0, 1172.0], [401.0, 29187.96296296296], [400.0, 26088.276209677395], [402.0, 14433.833333333334], [403.0, 14512.214285714288], [404.0, 16346.363636363636], [405.0, 444.1428571428571], [406.0, 5972.866666666667], [407.0, 6573.045454545455], [408.0, 6576.499999999999], [414.0, 6319.0], [415.0, 3006.1666666666665], [412.0, 32937.00000000001], [413.0, 14825.133333333333], [409.0, 6832.0], [410.0, 8169.785714285714], [411.0, 7463.999999999999], [417.0, 11886.818181818182], [416.0, 13172.941176470587], [418.0, 11439.75], [419.0, 22776.208333333336], [420.0, 19945.92857142857], [421.0, 9189.785714285714], [422.0, 43407.85], [423.0, 27894.894736842107], [424.0, 2452.4285714285716], [430.0, 4547.946946946959], [431.0, 2706.230769230769], [428.0, 4363.272727272728], [429.0, 1671.0], [425.0, 32210.093749999996], [426.0, 32344.77500000001], [427.0, 3502.2500000000005], [433.0, 2041.9999999999993], [432.0, 1143.816326530612], [434.0, 4167.409090909092], [435.0, 1858.8461538461536], [436.0, 3333.65306122449], [437.0, 7786.431034482758], [438.0, 1645.413043478261], [439.0, 2449.448275862069], [440.0, 435.2173913043478], [446.0, 2037.3870967741939], [447.0, 1595.8235294117646], [444.0, 5694.490566037736], [445.0, 662.8153846153845], [441.0, 1412.5384615384621], [442.0, 588.4000000000001], [443.0, 4097.428571428572], [449.0, 1982.045454545455], [448.0, 661.55], [450.0, 467.6956521739132], [451.0, 1231.5624999999998], [452.0, 2366.9803921568628], [453.0, 853.894736842105], [454.0, 2651.406593406594], [455.0, 3672.414285714287], [456.0, 1201.192307692308], [463.0, 1169.0], [462.0, 1178.0], [460.0, 1930.8658183921318], [461.0, 5175.5], [457.0, 210.3], [458.0, 5156.619047619048], [459.0, 1896.4242424242427], [479.0, 1160.0], [468.0, 18474.0], [469.0, 3159.0], [473.0, 665.0], [478.0, 1155.0], [477.0, 1163.0], [476.0, 1161.0], [467.0, 3174.0], [466.0, 1160.0], [465.0, 1171.0], [464.0, 1163.0], [470.0, 1157.0], [475.0, 1161.0], [474.0, 1164.0], [472.0, 1172.0], [494.0, 153.0], [486.0, 164.5], [485.0, 159.0], [484.0, 157.0], [487.0, 1498.3333333333335], [488.0, 1190.6666666666665], [490.0, 28150.309782608707], [489.0, 163.0], [495.0, 47629.5], [493.0, 1162.0], [492.0, 157.0], [483.0, 1163.0], [482.0, 1174.0], [481.0, 1169.0], [480.0, 1157.0], [491.0, 157.0], [496.0, 56134.333333333336], [498.0, 19433.2], [500.0, 6849.979610194932], [499.0, 163.0], [497.0, 154.0], [1.0, 3918.75]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}, {"data": [[271.08136066619323, 3100.391838071776]], "isOverall": false, "label": "Retorna lista de usuários por página-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5750.5, "minX": 1.72815456E12, "maxY": 174659.03333333333, "series": [{"data": [[1.7281548E12, 161782.9], [1.72815498E12, 171780.0], [1.72815516E12, 164233.8], [1.72815468E12, 161755.21666666667], [1.72815486E12, 166365.56666666668], [1.72815504E12, 162096.0], [1.72815456E12, 163885.1], [1.72815522E12, 72188.51666666666], [1.72815474E12, 163767.08333333334], [1.72815492E12, 161135.28333333333], [1.7281551E12, 174659.03333333333], [1.72815462E12, 160682.45]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7281548E12, 12663.5], [1.72815498E12, 13676.166666666666], [1.72815516E12, 12046.083333333334], [1.72815468E12, 12805.583333333334], [1.72815486E12, 13280.916666666666], [1.72815504E12, 12144.25], [1.72815456E12, 13087.166666666666], [1.72815522E12, 5750.5], [1.72815474E12, 13069.083333333334], [1.72815492E12, 12319.916666666666], [1.7281551E12, 13864.75], [1.72815462E12, 12831.416666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72815522E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 164.6105408606391, "minX": 1.72815456E12, "maxY": 8853.959302325628, "series": [{"data": [[1.7281548E12, 3582.1291164658664], [1.72815498E12, 2045.2565020731217], [1.72815516E12, 8853.959302325628], [1.72815468E12, 1836.9861751152182], [1.72815486E12, 1273.3737845196433], [1.72815504E12, 7249.33474919094], [1.72815456E12, 164.6105408606391], [1.72815522E12, 3887.6000000000026], [1.72815474E12, 842.8241454258051], [1.72815492E12, 5482.363857374407], [1.7281551E12, 2515.6250463821857], [1.72815462E12, 206.4388967183412]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72815522E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 164.55823134622972, "minX": 1.72815456E12, "maxY": 4778.768444266243, "series": [{"data": [[1.7281548E12, 2593.400200803219], [1.72815498E12, 1926.094609875615], [1.72815516E12, 4778.768444266243], [1.72815468E12, 1406.940292526554], [1.72815486E12, 1273.0904317386241], [1.72815504E12, 4177.191949838176], [1.72815456E12, 164.55823134622972], [1.72815522E12, 3802.5941704035913], [1.72815474E12, 842.5898043864851], [1.72815492E12, 3346.5279578606187], [1.7281551E12, 2321.6918367346984], [1.72815462E12, 206.3746728407492]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72815522E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 101.95262534544042, "minX": 1.72815456E12, "maxY": 8792.24097834802, "series": [{"data": [[1.7281548E12, 3517.5106425702843], [1.72815498E12, 1979.6160949868092], [1.72815516E12, 8792.24097834802], [1.72815468E12, 1773.523141654974], [1.72815486E12, 1207.9373784519662], [1.72815504E12, 7185.691343042082], [1.72815456E12, 101.95262534544042], [1.72815522E12, 3820.1479820627774], [1.72815474E12, 778.2294013040915], [1.72815492E12, 5420.484197730963], [1.7281551E12, 2448.598330241181], [1.72815462E12, 143.41332796456632]], "isOverall": false, "label": "Retorna lista de usuários por página", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72815522E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 147.0, "minX": 1.72815456E12, "maxY": 57394.0, "series": [{"data": [[1.7281548E12, 57375.0], [1.72815498E12, 49312.0], [1.72815516E12, 57374.0], [1.72815468E12, 57328.0], [1.72815486E12, 45245.0], [1.72815504E12, 57394.0], [1.72815456E12, 1162.0], [1.72815522E12, 57288.0], [1.72815474E12, 43255.0], [1.72815492E12, 57319.0], [1.7281551E12, 57267.0], [1.72815462E12, 28220.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7281548E12, 149.0], [1.72815498E12, 149.0], [1.72815516E12, 150.0], [1.72815468E12, 149.0], [1.72815486E12, 149.0], [1.72815504E12, 148.0], [1.72815456E12, 147.0], [1.72815522E12, 150.0], [1.72815474E12, 150.0], [1.72815492E12, 148.0], [1.7281551E12, 149.0], [1.72815462E12, 149.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7281548E12, 7168.7], [1.72815498E12, 3187.0], [1.72815516E12, 21199.0], [1.72815468E12, 3166.2], [1.72815486E12, 3174.0], [1.72815504E12, 15199.8], [1.72815456E12, 174.0], [1.72815522E12, 15190.0], [1.72815474E12, 1180.0], [1.72815492E12, 7241.0], [1.7281551E12, 7180.0], [1.72815462E12, 177.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7281548E12, 45246.97], [1.72815498E12, 28240.0], [1.72815516E12, 57252.72], [1.72815468E12, 22201.0], [1.72815486E12, 21275.359999999997], [1.72815504E12, 49336.91999999998], [1.72815456E12, 264.3299999999999], [1.72815522E12, 42225.0], [1.72815474E12, 15219.79999999999], [1.72815492E12, 49275.3], [1.7281551E12, 30875.639999997715], [1.72815462E12, 304.9599999999991]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7281548E12, 172.0], [1.72815498E12, 174.0], [1.72815516E12, 250.0], [1.72815468E12, 164.0], [1.72815486E12, 168.0], [1.72815504E12, 246.0], [1.72815456E12, 159.0], [1.72815522E12, 1163.0], [1.72815474E12, 163.0], [1.72815492E12, 178.0], [1.7281551E12, 187.0], [1.72815462E12, 160.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7281548E12, 15201.0], [1.72815498E12, 7288.5], [1.72815516E12, 28233.0], [1.72815468E12, 7177.0], [1.72815486E12, 7176.9], [1.72815504E12, 24213.8], [1.72815456E12, 196.0], [1.72815522E12, 15243.0], [1.72815474E12, 3184.0], [1.72815492E12, 21242.0], [1.7281551E12, 15193.0], [1.72815462E12, 225.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72815522E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 111.0, "minX": 1.0, "maxY": 63154.0, "series": [{"data": [[2.0, 18195.5], [3.0, 15188.5], [4.0, 15194.0], [5.0, 11185.5], [6.0, 15184.0], [7.0, 3173.0], [8.0, 15186.0], [9.0, 3164.0], [10.0, 3173.0], [11.0, 21195.0], [12.0, 18183.0], [13.0, 15172.5], [14.0, 3199.0], [15.0, 164.5], [16.0, 22203.5], [17.0, 21185.0], [18.0, 1166.0], [21.0, 29231.0], [24.0, 15241.0], [25.0, 163.0], [28.0, 160.5], [29.0, 164.0], [31.0, 15174.0], [33.0, 3175.5], [35.0, 24203.0], [36.0, 163.5], [38.0, 169.5], [43.0, 1158.0], [44.0, 1176.0], [45.0, 1166.0], [47.0, 170.0], [49.0, 1166.0], [48.0, 1160.0], [51.0, 1174.0], [50.0, 1162.0], [53.0, 162.0], [52.0, 169.0], [54.0, 170.0], [55.0, 210.5], [56.0, 205.0], [57.0, 163.0], [58.0, 173.0], [59.0, 1166.0], [60.0, 162.0], [61.0, 161.0], [62.0, 160.0], [63.0, 164.0], [67.0, 162.0], [65.0, 173.5], [64.0, 165.0], [66.0, 1164.5], [69.0, 171.0], [68.0, 175.0], [70.0, 193.0], [71.0, 1162.0], [72.0, 158.0], [75.0, 1155.5], [73.0, 1162.0], [74.0, 1173.5], [76.0, 1164.0], [79.0, 1159.5], [78.0, 1165.0], [80.0, 176.5], [86.0, 187.5], [87.0, 1167.5], [89.0, 170.0], [88.0, 1169.0], [94.0, 1161.0], [95.0, 185.0], [92.0, 1163.5], [97.0, 266.0], [99.0, 1159.5], [102.0, 157.0], [107.0, 162.0], [104.0, 1226.0], [109.0, 169.0], [108.0, 3185.0], [114.0, 1164.0], [117.0, 172.0], [127.0, 1167.5], [134.0, 167.0], [129.0, 163.0], [141.0, 157.0], [139.0, 172.0], [142.0, 217.5], [144.0, 254.5], [148.0, 161.0], [149.0, 200.0], [154.0, 164.0], [159.0, 162.0], [153.0, 3197.0], [162.0, 165.0], [163.0, 169.0], [173.0, 161.0], [170.0, 162.0], [175.0, 178.0], [179.0, 158.0], [177.0, 165.0], [182.0, 182.0], [189.0, 163.0], [191.0, 163.0], [187.0, 170.0], [184.0, 166.0], [188.0, 181.0], [186.0, 166.0], [197.0, 164.0], [196.0, 162.0], [192.0, 173.0], [194.0, 198.0], [203.0, 163.0], [207.0, 164.0], [202.0, 166.0], [204.0, 167.0], [206.0, 159.0], [200.0, 163.0], [201.0, 171.0], [212.0, 165.0], [211.0, 165.0], [215.0, 164.0], [209.0, 168.0], [210.0, 170.0], [217.0, 162.0], [222.0, 166.0], [218.0, 161.5], [221.0, 175.0], [220.0, 162.0], [216.0, 234.0], [223.0, 193.0], [219.0, 165.0], [225.0, 164.0], [230.0, 160.0], [224.0, 199.5], [227.0, 168.0], [228.0, 222.5], [239.0, 159.0], [237.0, 163.0], [238.0, 168.0], [233.0, 217.0], [236.0, 165.0], [232.0, 181.5], [235.0, 170.0], [234.0, 168.0], [246.0, 159.0], [247.0, 161.0], [241.0, 169.0], [244.0, 165.0], [243.0, 160.0], [242.0, 164.0], [240.0, 171.0], [245.0, 167.0], [250.0, 158.0], [248.0, 160.0], [252.0, 163.0], [255.0, 162.0], [249.0, 168.0], [253.0, 165.0], [254.0, 162.0], [251.0, 167.0], [256.0, 161.0], [258.0, 161.0], [261.0, 217.0], [268.0, 176.0], [257.0, 172.0], [270.0, 166.5], [263.0, 194.0], [269.0, 1168.0], [275.0, 167.0], [281.0, 180.0], [274.0, 176.0], [287.0, 178.0], [273.0, 165.0], [277.0, 258.0], [280.0, 282.5], [284.0, 273.0], [285.0, 170.0], [289.0, 168.0], [302.0, 176.0], [295.0, 187.0], [300.0, 171.5], [304.0, 211.0], [316.0, 171.0], [307.0, 287.0], [311.0, 196.0], [314.0, 172.0], [340.0, 249.0], [348.0, 271.0], [1.0, 15198.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 63123.0], [4.0, 63118.0], [5.0, 63124.5], [7.0, 63112.0], [8.0, 63111.5], [9.0, 63144.5], [10.0, 63107.0], [11.0, 63117.5], [13.0, 63121.0], [14.0, 63126.0], [15.0, 63120.0], [17.0, 63115.0], [18.0, 63129.0], [21.0, 63154.0], [24.0, 63080.0], [33.0, 63140.0], [35.0, 63135.0], [44.0, 63125.5], [47.0, 63117.0], [49.0, 63099.0], [48.0, 63088.0], [54.0, 63097.0], [56.0, 63103.0], [59.0, 63116.0], [58.0, 63099.0], [60.0, 63127.0], [61.0, 63084.0], [62.0, 63133.5], [63.0, 63120.0], [64.0, 63115.0], [65.0, 63115.0], [66.0, 63144.5], [70.0, 63131.0], [71.0, 63134.0], [68.0, 63143.0], [69.0, 63123.5], [75.0, 63129.0], [74.0, 63131.5], [73.0, 63118.5], [76.0, 63104.0], [78.0, 63143.0], [79.0, 63111.0], [80.0, 63126.0], [87.0, 63110.5], [89.0, 63111.5], [88.0, 63129.0], [94.0, 63121.0], [92.0, 63113.5], [97.0, 63125.5], [99.0, 63109.0], [107.0, 63125.5], [104.0, 63124.0], [108.0, 63105.0], [114.0, 63130.0], [117.0, 63125.5], [127.0, 63123.0], [134.0, 63116.0], [148.0, 63145.0], [159.0, 63097.0], [189.0, 63148.0], [194.0, 63118.0], [204.0, 63109.0], [210.0, 1414.0], [215.0, 1112.0], [220.0, 562.0], [235.0, 1751.0], [247.0, 117.0], [251.0, 434.0], [255.0, 14625.0], [249.0, 111.0], [269.0, 36238.0], [277.0, 913.0], [280.0, 1803.0], [307.0, 761.0], [304.0, 63119.0], [340.0, 162.0], [348.0, 171.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 348.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 29230.5, "series": [{"data": [[2.0, 18195.5], [3.0, 15188.5], [4.0, 15194.0], [5.0, 11185.0], [6.0, 15184.0], [7.0, 3173.0], [8.0, 15185.5], [9.0, 3164.0], [10.0, 3172.5], [11.0, 21195.0], [12.0, 18183.0], [13.0, 15172.0], [14.0, 3199.0], [15.0, 164.5], [16.0, 22203.0], [17.0, 21185.0], [18.0, 1166.0], [21.0, 29230.5], [24.0, 15241.0], [25.0, 163.0], [28.0, 160.5], [29.0, 164.0], [31.0, 15174.0], [33.0, 3175.5], [35.0, 24203.0], [36.0, 163.5], [38.0, 169.5], [43.0, 1158.0], [44.0, 1176.0], [45.0, 1166.0], [47.0, 170.0], [49.0, 1166.0], [48.0, 1160.0], [51.0, 1174.0], [50.0, 1162.0], [53.0, 162.0], [52.0, 169.0], [54.0, 170.0], [55.0, 210.5], [56.0, 205.0], [57.0, 163.0], [58.0, 173.0], [59.0, 1166.0], [60.0, 162.0], [61.0, 161.0], [62.0, 160.0], [63.0, 163.0], [67.0, 162.0], [65.0, 173.5], [64.0, 165.0], [66.0, 1164.0], [69.0, 171.0], [68.0, 175.0], [70.0, 193.0], [71.0, 1161.0], [72.0, 158.0], [75.0, 1155.5], [73.0, 1162.0], [74.0, 1173.0], [76.0, 1164.0], [79.0, 1159.5], [78.0, 1165.0], [80.0, 176.5], [86.0, 187.5], [87.0, 1167.5], [89.0, 170.0], [88.0, 1169.0], [94.0, 1161.0], [95.0, 185.0], [92.0, 1163.5], [97.0, 266.0], [99.0, 1159.5], [102.0, 157.0], [107.0, 162.0], [104.0, 1226.0], [109.0, 169.0], [108.0, 3185.0], [114.0, 1164.0], [117.0, 172.0], [127.0, 1167.5], [134.0, 167.0], [129.0, 163.0], [141.0, 157.0], [139.0, 172.0], [142.0, 217.5], [144.0, 254.5], [148.0, 161.0], [149.0, 200.0], [154.0, 164.0], [159.0, 162.0], [153.0, 3197.0], [162.0, 165.0], [163.0, 169.0], [173.0, 161.0], [170.0, 162.0], [175.0, 177.0], [179.0, 158.0], [177.0, 165.0], [182.0, 182.0], [189.0, 163.0], [191.0, 163.0], [187.0, 170.0], [184.0, 166.0], [188.0, 181.0], [186.0, 166.0], [197.0, 164.0], [196.0, 162.0], [192.0, 173.0], [194.0, 198.0], [203.0, 163.0], [207.0, 164.0], [202.0, 165.0], [204.0, 167.0], [206.0, 159.0], [200.0, 163.0], [201.0, 171.0], [212.0, 165.0], [211.0, 164.0], [215.0, 164.0], [209.0, 168.0], [210.0, 170.0], [217.0, 162.0], [222.0, 166.0], [218.0, 161.0], [221.0, 175.0], [220.0, 162.0], [216.0, 234.0], [223.0, 193.0], [219.0, 165.0], [225.0, 164.0], [230.0, 160.0], [224.0, 199.0], [227.0, 168.0], [228.0, 222.5], [239.0, 159.0], [237.0, 163.0], [238.0, 168.0], [233.0, 217.0], [236.0, 165.0], [232.0, 181.5], [235.0, 170.0], [234.0, 168.0], [246.0, 159.0], [247.0, 161.0], [241.0, 169.0], [244.0, 165.0], [243.0, 160.0], [242.0, 163.5], [240.0, 170.0], [245.0, 167.0], [250.0, 158.0], [248.0, 159.0], [252.0, 163.0], [255.0, 162.0], [249.0, 167.0], [253.0, 164.0], [254.0, 162.0], [251.0, 167.0], [256.0, 161.0], [258.0, 160.5], [261.0, 217.0], [268.0, 176.0], [257.0, 171.5], [270.0, 166.0], [263.0, 194.0], [269.0, 1168.0], [275.0, 167.0], [281.0, 180.0], [274.0, 176.0], [287.0, 178.0], [273.0, 165.0], [277.0, 258.0], [280.0, 282.5], [284.0, 273.0], [285.0, 170.0], [289.0, 168.0], [302.0, 176.0], [295.0, 187.0], [300.0, 171.5], [304.0, 211.0], [316.0, 171.0], [307.0, 287.0], [311.0, 196.0], [314.0, 172.0], [340.0, 249.0], [348.0, 271.0], [1.0, 15198.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [17.0, 0.0], [18.0, 0.0], [21.0, 0.0], [24.0, 0.0], [33.0, 0.0], [35.0, 0.0], [44.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [54.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [60.0, 0.0], [61.0, 0.0], [62.0, 0.0], [63.0, 0.0], [64.0, 0.0], [65.0, 0.0], [66.0, 0.0], [70.0, 0.0], [71.0, 0.0], [68.0, 0.0], [69.0, 0.0], [75.0, 0.0], [74.0, 0.0], [73.0, 0.0], [76.0, 0.0], [78.0, 0.0], [79.0, 0.0], [80.0, 0.0], [87.0, 0.0], [89.0, 0.0], [88.0, 0.0], [94.0, 0.0], [92.0, 0.0], [97.0, 0.0], [99.0, 0.0], [107.0, 0.0], [104.0, 0.0], [108.0, 0.0], [114.0, 0.0], [117.0, 0.0], [127.0, 0.0], [134.0, 0.0], [148.0, 0.0], [159.0, 0.0], [189.0, 0.0], [194.0, 0.0], [204.0, 0.0], [210.0, 0.0], [215.0, 0.0], [220.0, 0.0], [235.0, 0.0], [247.0, 0.0], [251.0, 0.0], [255.0, 0.0], [249.0, 0.0], [269.0, 0.0], [277.0, 0.0], [280.0, 0.0], [307.0, 0.0], [304.0, 0.0], [340.0, 0.0], [348.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 348.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.833333333333332, "minX": 1.72815456E12, "maxY": 90.36666666666666, "series": [{"data": [[1.7281548E12, 84.0], [1.72815498E12, 89.43333333333334], [1.72815516E12, 83.3], [1.72815468E12, 83.7], [1.72815486E12, 86.2], [1.72815504E12, 83.36666666666666], [1.72815456E12, 85.1], [1.72815522E12, 28.833333333333332], [1.72815474E12, 85.36666666666666], [1.72815492E12, 83.26666666666667], [1.7281551E12, 90.36666666666666], [1.72815462E12, 83.75]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72815522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72815456E12, "maxY": 89.45, "series": [{"data": [[1.7281548E12, 81.7], [1.72815498E12, 88.23333333333333], [1.72815516E12, 77.71666666666667], [1.72815468E12, 82.61666666666666], [1.72815486E12, 85.68333333333334], [1.72815504E12, 78.35], [1.72815456E12, 84.43333333333334], [1.72815522E12, 37.1], [1.72815474E12, 84.31666666666666], [1.72815492E12, 79.48333333333333], [1.7281551E12, 89.45], [1.72815462E12, 82.78333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7281548E12, 1.3], [1.72815498E12, 0.2], [1.72815516E12, 5.416666666666667], [1.72815468E12, 0.5666666666666667], [1.72815486E12, 0.016666666666666666], [1.72815504E12, 4.05], [1.72815522E12, 0.06666666666666667], [1.72815474E12, 0.03333333333333333], [1.72815492E12, 2.783333333333333], [1.7281551E12, 0.38333333333333336]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72815522E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72815456E12, "maxY": 89.45, "series": [{"data": [[1.7281548E12, 81.7], [1.72815498E12, 88.23333333333333], [1.72815516E12, 77.71666666666667], [1.72815468E12, 82.61666666666666], [1.72815486E12, 85.68333333333334], [1.72815504E12, 78.35], [1.72815456E12, 84.43333333333334], [1.72815522E12, 37.1], [1.72815474E12, 84.31666666666666], [1.72815492E12, 79.48333333333333], [1.7281551E12, 89.45], [1.72815462E12, 82.78333333333333]], "isOverall": false, "label": "Retorna lista de usuários por página-success", "isController": false}, {"data": [[1.7281548E12, 1.3], [1.72815498E12, 0.2], [1.72815516E12, 5.416666666666667], [1.72815468E12, 0.5666666666666667], [1.72815486E12, 0.016666666666666666], [1.72815504E12, 4.05], [1.72815522E12, 0.06666666666666667], [1.72815474E12, 0.03333333333333333], [1.72815492E12, 2.783333333333333], [1.7281551E12, 0.38333333333333336]], "isOverall": false, "label": "Retorna lista de usuários por página-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72815522E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72815456E12, "maxY": 89.45, "series": [{"data": [[1.7281548E12, 81.7], [1.72815498E12, 88.23333333333333], [1.72815516E12, 77.71666666666667], [1.72815468E12, 82.61666666666666], [1.72815486E12, 85.68333333333334], [1.72815504E12, 78.35], [1.72815456E12, 84.43333333333334], [1.72815522E12, 37.1], [1.72815474E12, 84.31666666666666], [1.72815492E12, 79.48333333333333], [1.7281551E12, 89.45], [1.72815462E12, 82.78333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7281548E12, 1.3], [1.72815498E12, 0.2], [1.72815516E12, 5.416666666666667], [1.72815468E12, 0.5666666666666667], [1.72815486E12, 0.016666666666666666], [1.72815504E12, 4.05], [1.72815522E12, 0.06666666666666667], [1.72815474E12, 0.03333333333333333], [1.72815492E12, 2.783333333333333], [1.7281551E12, 0.38333333333333336]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72815522E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

